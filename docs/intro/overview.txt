==================
初探 Django
==================

由于Django是在一个快节奏的新闻编辑室环境下开发出来的，因此它被设计成让普通的网站开发工作简单而快
捷。以下简单介绍了如何用 Django 编写一个数据库驱动的Web应用程序。

本文档的目标是给你描述足够的技术细节能让你理解Django是如何工作的，但是它并不表示是一个新手指南或参考目录
-- 其实这些我们都有!当你准备新建一个项目，你可以 :doc:`从新手指南开始 </intro/tutorial01>` 或者 :doc:`深入阅读详细的文档 </topics/index>` 。

设计你的模型(model)
=================

尽管你在 Django 中可以不使用数据库，但是它提供了一个完善的可以用 Python
代码描述你的数据库结构的 `对象关联映射(ORM)`_ 。

.. _对象关联映射(ORM): http://zh.wikipedia.org/wiki/%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84

:doc:`数据模型语法 </topics/db/models>` 提供了许多丰富的方法来展现你的模型 -- 
到目前为止，它已经解决了两个多年积累下来数据库架构问题。
下面是个简单的例子，可能被保存为 ``mysite/news/models.py``::

    from django.db import models

    class Reporter(models.Model):
        full_name = models.CharField(max_length=70)

        # On Python 3: def __str__(self):
        def __unicode__(self):
            return self.full_name

    class Article(models.Model):
        pub_date = models.DateField()
        headline = models.CharField(max_length=200)
        content = models.TextField()
        reporter = models.ForeignKey(Reporter)

        # On Python 3: def __str__(self):
        def __unicode__(self):
            return self.headline

安装你的模型
============

下一步，运行 Django 命令行工具来自动创建数据库表：

.. code-block:: bash

    $ python manage.py syncdb

:djadmin:`syncdb` 命令会查找你所有可用的模型(models)然后在你的数据库中创建还不存在的数据库表。

享用便捷的 API
==================

接着，你就可以使用一个便捷且功能丰富的 :doc:`Python API </topics/db/queries>`
来访问你的数据。API 是动态生成的，不需要代码生成:

.. code-block:: python

    # 导入我们在 "news "应用中创建的模型。
    >>> from news.models import Reporter, Article

    # 在系统中还没有 reporters 。
    >>> Reporter.objects.all()
    []

    # 创建一个新的 reporter 。
    >>> r = Reporter(full_name='John Smith')

    #将对象保存到数据库。你需要显式的调用 save() 方法。
    >>> r.save()

    # 现在它拥有了一个ID。
    >>> r.id
    1

    # 现在新的 reporter 已经存在数据库里了。
    >>> Reporter.objects.all()
    [<Reporter: John Smith>]

    # 字段被表示为一个 Python 对象的属性。
    >>> r.full_name
    'John Smith'

    # Django 提供了丰富的数据库查询 API。
    >>> Reporter.objects.get(id=1)
    <Reporter: John Smith>
    >>> Reporter.objects.get(full_name__startswith='John')
    <Reporter: John Smith>
    >>> Reporter.objects.get(full_name__contains='mith')
    <Reporter: John Smith>
    >>> Reporter.objects.get(id=2)
    Traceback (most recent call last):
        ...
    DoesNotExist: Reporter matching query does not exist. Lookup parameters were {'id': 2}

    # 创建一个 article.
    >>> from datetime import date
    >>> a = Article(pub_date=date.today(), headline='Django is cool',
    ...     content='Yeah.', reporter=r)
    >>> a.save()

    # 现在 article 已经存在数据库里了。
    >>> Article.objects.all()
    [<Article: Django is cool>]

    # Article 对象有 API 可以访问到关联到 Reporter 对象。
    >>> r = a.reporter
    >>> r.full_name
    'John Smith'

    # 反之亦然：Reporter 对象也有访问 Article 对象的API。
    >>> r.article_set.all()
    [<Article: Django is cool>]

    # API 会在幕后高效的关联表来满足你的关联查询的需求。
    # 以下例子是找出名字开头为 "John" 的 reporter 的所有 articles 。
    >>> Article.objects.filter(reporter__full_name__startswith="John")
    [<Article: Django is cool>]

    # 通过更改一个对象的属性值，然后再调用 save() 方法来改变它。
    >>> r.full_name = 'Billy Goat'
    >>> r.save()

    # 调用 delete() 方法来删除一个对象。
    >>> r.delete()

一个动态的管理接口：它不仅仅是个脚手架 -- 还是个完整的房子
============================================================================

一旦你的 models 被定义好，Django 能自动创建一个专业的，可以用于生产环境的
:doc:`管理界面 </ref/contrib/admin/index>` --
一个可让授权用户添加，修改和删除对象的网站。
它使用起来非常简单只需在你的 admin site 中注册你的模型即可。::

    # In models.py...

    from django.db import models

    class Article(models.Model):
        pub_date = models.DateField()
        headline = models.CharField(max_length=200)
        content = models.TextField()
        reporter = models.ForeignKey(Reporter)


    # In admin.py in the same directory...

    import models
    from django.contrib import admin

    admin.site.register(models.Article)

这种设计理念是你的网站一般是由一个员工,或者客户，或者仅仅是你自己去编辑 -- 而你应该不会想要仅仅为了管理内容而去创建后台界面。

在一个创建 Django 应用的典型工作流中，首先需要创建模型并尽可能快地启动和运行 admin sites，
让您的员工(或者客户)能够开始录入数据。然后，才开发展现数据给公众的方式。

设计你的 URLs
================

一个干净的，优雅的 URL 方案是一个高质量 Web 应用程序的重要细节。
Django 鼓励使用漂亮的 URL 设计，并且不鼓励把没必要的东西放到 URLs 里面，像 ``.php`` 或 ``.asp``.

为了给一个 app 设计 URLs，你需要创建一个 Python 模块叫做 :doc:`URLconf </topics/http/urls>`。
这是一个你的 app 内容目录，它包含一个简单的 URL 匹配模式与 Python 回调函数间的映射关系。
这有助于解耦 Python 代码和 URLs 。

这是针对上面 ``Reporter``/``Article`` 例子所配置的 URLconf 大概样子::

    from django.conf.urls import patterns

    urlpatterns = patterns('',
        (r'^articles/(\d{4})/$', 'news.views.year_archive'),
        (r'^articles/(\d{4})/(\d{2})/$', 'news.views.month_archive'),
        (r'^articles/(\d{4})/(\d{2})/(\d+)/$', 'news.views.article_detail'),
    )

上面的代码映射了 URLs ，从一个简单的`正则表达式`_, 到 Python 回调函数("views")所在的位置。
正则表达式通过圆括号来“捕获” URLs 中的值。 当一个用户请求一个页面时， Django将按照顺序去匹配每一个模式，
并停在第一个匹配请求的 URL 上。(如果没有匹配到， Django 将会展示一个404的错误页面。) 整个过程是极快的，因为在加载时正则表达式就进行了编译。

.. _正则表达式: http://docs.python.org/2/howto/regex.html

一旦有一个正则表达式匹配上了，Django将导入和调用对应的视图，
它其实就是一个简单的 Python 函数。每个视图将得到一个request 对象-- 它包含了 request 
的 meta 信息 -- 和正则表达式所捕获到的值。

例如：如果一个用户请求了个 URL "/articles/2005/05/39323/", Django
将会这样调用函数 ``news.views.article_detail(request, '2005', '05', '39323')``

编写你的视图(views)
===================

Each view is responsible for doing one of two things: Returning an
:class:`~django.http.HttpResponse` object containing the content for the
requested page, or raising an exception such as :class:`~django.http.Http404`.
The rest is up to you.

Generally, a view retrieves data according to the parameters, loads a template
and renders the template with the retrieved data. Here's an example view for
``year_archive`` from above::

    from django.shortcuts import render_to_response

    def year_archive(request, year):
        a_list = Article.objects.filter(pub_date__year=year)
        return render_to_response('news/year_archive.html', {'year': year, 'article_list': a_list})

This example uses Django's :doc:`template system </topics/templates>`, which has
several powerful features but strives to stay simple enough for non-programmers
to use.

Design your templates
=====================

The code above loads the ``news/year_archive.html`` template.

Django has a template search path, which allows you to minimize redundancy among
templates. In your Django settings, you specify a list of directories to check
for templates with :setting:`TEMPLATE_DIRS`. If a template doesn't exist in the
first directory, it checks the second, and so on.

Let's say the ``news/year_archive.html`` template was found. Here's what that
might look like:

.. code-block:: html+django

    {% extends "base.html" %}

    {% block title %}Articles for {{ year }}{% endblock %}

    {% block content %}
    <h1>Articles for {{ year }}</h1>

    {% for article in article_list %}
        <p>{{ article.headline }}</p>
        <p>By {{ article.reporter.full_name }}</p>
        <p>Published {{ article.pub_date|date:"F j, Y" }}</p>
    {% endfor %}
    {% endblock %}

Variables are surrounded by double-curly braces. ``{{ article.headline }}``
means "Output the value of the article's headline attribute." But dots aren't
used only for attribute lookup: They also can do dictionary-key lookup, index
lookup and function calls.

Note ``{{ article.pub_date|date:"F j, Y" }}`` uses a Unix-style "pipe" (the "|"
character). This is called a template filter, and it's a way to filter the value
of a variable. In this case, the date filter formats a Python datetime object in
the given format (as found in PHP's date function).

You can chain together as many filters as you'd like. You can write :ref:`custom
template filters <howto-writing-custom-template-filters>`. You can write
:doc:`custom template tags </howto/custom-template-tags>`, which run custom
Python code behind the scenes.

Finally, Django uses the concept of "template inheritance": That's what the
``{% extends "base.html" %}`` does. It means "First load the template called
'base', which has defined a bunch of blocks, and fill the blocks with the
following blocks." In short, that lets you dramatically cut down on redundancy
in templates: each template has to define only what's unique to that template.

Here's what the "base.html" template, including the use of :doc:`static files
</howto/static-files/index>`, might look like:

.. code-block:: html+django

    {% load staticfiles %}
    <html>
    <head>
        <title>{% block title %}{% endblock %}</title>
    </head>
    <body>
        <img src="{% static "images/sitelogo.png" %}" alt="Logo" />
        {% block content %}{% endblock %}
    </body>
    </html>

Simplistically, it defines the look-and-feel of the site (with the site's logo),
and provides "holes" for child templates to fill. This makes a site redesign as
easy as changing a single file -- the base template.

It also lets you create multiple versions of a site, with different base
templates, while reusing child templates. Django's creators have used this
technique to create strikingly different cell-phone editions of sites -- simply
by creating a new base template.

Note that you don't have to use Django's template system if you prefer another
system. While Django's template system is particularly well-integrated with
Django's model layer, nothing forces you to use it. For that matter, you don't
have to use Django's database API, either. You can use another database
abstraction layer, you can read XML files, you can read files off disk, or
anything you want. Each piece of Django -- models, views, templates -- is
decoupled from the next.

This is just the surface
========================

This has been only a quick overview of Django's functionality. Some more useful
features:

* A :doc:`caching framework </topics/cache>` that integrates with memcached
  or other backends.

* A :doc:`syndication framework </ref/contrib/syndication>` that makes
  creating RSS and Atom feeds as easy as writing a small Python class.

* More sexy automatically-generated admin features -- this overview barely
  scratched the surface.

The next obvious steps are for you to `download Django`_, read :doc:`the
tutorial </intro/tutorial01>` and join `the community`_. Thanks for your
interest!

.. _download Django: https://www.djangoproject.com/download/
.. _the community: https://www.djangoproject.com/community/
